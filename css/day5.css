/* ================================================================================================= */

/* CSS Media Queries */

/* - Using media queries are a popular technique for delivering a tailored style sheet to desktops, laptops, 
     tablets, and mobile phones (such as iPhone and Android phones). */


/* - The following example changes the background-color to lightgreen if the viewport is 480 pixels wide or
     wider (if the viewport is less than 480 pixels, the background-color will be pink): */
@media screen and (min-width: 480px) {
    body {
        background-color: lightgreen;
    }
}

/* ================================================================================================================ */

/* - On screens that are 992px or less, set the background color to blue */
@media screen and (max-width: 992px) {
    body {
        background-color: blue;
    }
}

/* =============================================================================================================== */

/* Min Width to Max Width */

/* - when the browser's width is between 600 and 900px, change the appearance of a <div> element */
@media screen and (max-width: 900px) and (min-width: 600px) {
    div.example {
        font-size: 50px;
        padding: 50px;
        border: 8px solid black;
        background: yellow;
    }
}

/* ============================================================================================================== */

/* CSS Flexbox */

/* 
Flexbox is a layout model that provides an easy and clean way to arrange items within a container.
 - There are 2 main components of the Flexbox:
 - Flex Container: The parent “div” which contains various divisions is called a flex container.
 - Flex Items: The items inside the container “div” are flex items.
 - For creating the flexbox, we need to create a flex container along with setting the display property to flex. */

/* 
    <div class="flex-container">
        <div class="flex-child">One</div>
        <div class="flex-child">Two</div>
        <div class="flex-child">Three</div>
        <div class="flex-child">Four</div>
    </div> 
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
}

/* ============================================================================================================= */

/*
The flex container properties are:

    flex-direction
    flex-wrap
    flex-flow
    justify-content
    align-items
    align-content 
*/

/* ===================================================================================================== */

/* The flex-direction Property */
/* - The flex-direction property defines in which direction the container wants to stack the flex items. */
.flex-container {
    display: flex;
    flex-direction: column;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
}

/* - The column-reverse value stacks the flex items vertically (but from bottom to top): */
.flex-container {
    flex-direction: column-reverse;
}

/* - The row value stacks the flex items horizontally (from left to right): */
.flex-container {
    flex-direction: row;
}

/* - The row-reverse value stacks the flex items horizontally (but from right to left): */
.flex-container {
    flex-direction: row-reverse;
}

/* ======================================================================================================== */

/* The flex-wrap Property */
/* - The flex-wrap property specifies whether the flex items should wrap or not. */

/* 
<div class="flex-container">
<div class="flex-child">One</div>
<div class="flex-child">Two</div>
<div class="flex-child">Three</div>
<div class="flex-child">Four</div>
<div class="flex-child">Five</div>
<div class="flex-child">Six</div>
<div class="flex-child">Seven</div>
<div class="flex-child">Eight</div>
</div> 
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
    flex-wrap: wrap;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    text-align: center;
}

/* - The wrap-reverse value specifies that the flexible items will wrap if necessary, in reverse order: */
.flex-container {
    flex-wrap: wrap-reverse;
}

/* ============================================================================================================== */

/* The flex-flow Property */
/* - The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties. */
.flex-container {
    background-color: blueviolet;
    display: flex;
    flex-flow: row wrap;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    text-align: center;
}

/* =============================================================================================================== */

/* The justify-content Property */
/* - The justify-content property is used to align the flex items: */
/* - The center value aligns the flex items at the center of the container: */

/* 
    <div class="flex-container">
    <div class="flex-child">One</div>
    <div class="flex-child">Two</div>
    <div class="flex-child">Three</div>
    </div> 
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    text-align: center;
}

/* - The flex-start value aligns the flex items at the beginning of the container (this is default): */
.flex-container {
    justify-content: flex-start;
}

/* - The flex-end value aligns the flex items at the end of the container: */
.flex-container {
    justify-content: flex-end;
}

/* - The space-around value displays the flex items with space before, between, and after the lines: */
.flex-container {
    justify-content: space-around;
}

/* - Display the flex items with space between the lines */
.flex-container {
    justify-content: space-between;
}

/* ===================================================================================================== */

/* The align-items Property */
/* - The align-items property is used to align the flex items. */
/* - The center value aligns the flex items in the middle of the container: */
.flex-container {
    background-color: blueviolet;
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    height: 400px;
    /*  */
    align-items: center;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    text-align: center;
}


/* - The flex-start value aligns the flex items at the top of the container: */
.flex-container {
    align-items: flex-start;
}

/* - The flex-end value aligns the flex items at the bottom of the container: */
.flex-container {
    align-items: flex-end;
}


/* - The stretch value stretches the flex items to fill the container (this is default): */
.flex-container {
    align-items: stretch;
}

/* ================================================================================================== */

/* The align-content Property */
/* - The align-content property is used to align the flex lines. */
/* - The space-between value displays the flex lines with equal space between them: */

/* 
    <div class="flex-container">
    <div class="flex-child">One</div>
    <div class="flex-child">Two</div>
    <div class="flex-child">Three</div>
    <div class="flex-child">Four</div>
    <div class="flex-child">Five</div>
    <div class="flex-child">Six</div>
    <div class="flex-child">Seven</div>
    <div class="flex-child">Eight</div>
    </div> 
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
    flex-flow: row wrap;
    height: 400px;
    /*  */
    align-items: stretch;
    flex-wrap: wrap;
    align-content: space-between;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    text-align: center;
}

/* - The space-around value displays the flex lines with space before, between, and after them: */
.flex-container {
    align-content: space-around;
}

/* - The stretch value stretches the flex lines to take up the remaining space (this is default): */
.flex-container {
    align-content: stretch;
}

/* - The center value displays the flex lines in the middle of the container: */
.flex-container {
    align-content: center;
}

/* - The flex-start value displays the flex lines at the start of the container: */
.flex-container {
    align-content: flex-start;
}

/* - The flex-end value displays the flex lines at the end of the container:  */
.flex-container {
    align-content: flex-end;
}

/* ======================================================================================= */

/* Perfect Centering */

.flex-container {
    display: flex;
    height: 300px;
    /* justify-content: center; */
    /* align-items: center; */
}

/* ============================================================================================ */

/* CSS Flex Items */

/* 
The flex item properties are:

order
flex-grow
flex-shrink
flex-basis
align-self
*/

/* =============================================================================================== */

/* The order Property */
/* - The order property specifies the order of the flex items. */

/* 
    <div class="flex-container">
    <div class="flex-child one">One</div>
    <div class="flex-child two">Two</div>
    <div class="flex-child three">Three</div>
    </div>
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    text-align: center;
}

.one {
    order: 2;
}

.two {
    order: 3;
}

.three {
    order: 1;
}


/* ===================================================================================================== */

/* The flex-grow Property */
/* - The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items. */
/* 
    <div class="flex-container">
    <div class="flex-child one">One</div>
    <div class="flex-child two">Two</div>
    <div class="flex-child three">Three</div>
    </div>
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    text-align: center;
}

.one {
    flex-grow: 1;
}

.two {
    flex-grow: 1;
}

.three {
    flex-grow: 1;
}

/* ======================================================================================================= */

/* The flex-shrink Property */
/* - The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items. */
/* 
    <div class="flex-container">
    <div class="flex-child one">One</div>
    <div class="flex-child two">Two</div>
    <div class="flex-child three">Three</div>
    <div class="flex-child four">four</div>
    <div class="flex-child five">five</div>
    <div class="flex-child six">six</div>
                                            space will be decrese after this.
    <div class="flex-child seven">seven</div>
    <div class="flex-child eight">eight</div>
    </div>
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    width: 100%;
    text-align: center;
}

.one {
    flex-shrink: 3;
}

.two {
    flex-shrink: 2;
}

.three {
    flex-shrink: 1;
}

/* ========================================================================================================= */

/* The flex-basis Property */
/* - The flex-basis property specifies the initial length of a flex item. */

/* 
<div class="flex-container">
<div class="flex-child">One</div>
<div class="flex-child">Two</div>
<div class="flex-child">Three</div>
</div>
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    width: 100%;
    text-align: center;
}

.two {
    flex-basis: 300px;
}


/* ========================================================================================================= */

/* The align-self Property */
/* - The align-self property specifies the alignment for the selected item inside the flexible container. */
/* - The align-self property overrides the default alignment set by the container's align-items property */
/* 
<div class="flex-container">
<div class="flex-child">One</div>
<div class="flex-child">Two</div>
<div class="flex-child">Three</div>
</div>
*/
.flex-container {
    background-color: blueviolet;
    display: flex;
    height: 400px;
}

.flex-child {
    background-color: burlywood;
    margin: 20px;
    padding: 20px;
    width: 100%;
    text-align: center;
}

.one {
    align-self: flex-start;
}

.two {
    align-self: center;
}

.three {
    align-self: flex-end;
}